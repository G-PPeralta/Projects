{"ast":null,"code":"var _jsxFileName = \"/home/gabriel/Ignite/React Js/dtmoney/first-aplication/src/TransactionsContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { api } from \"../../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext([]);\nexport const TransactionsProvider = () => {\n  _s();\n\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get(\"transactions\").then(response => setTransactions(response.data.transactions));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: transactions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"sources":["/home/gabriel/Ignite/React Js/dtmoney/first-aplication/src/TransactionsContext.js"],"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionsProvider","transactions","setTransactions","get","then","response","data"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,oBAApB;;AAEA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAAC,EAAD,CAAzC;AAEP,OAAO,MAAMK,oBAAoB,GAAG,MAAM;AAAA;;AACxC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,GAAG,CACAK,GADH,CACO,cADP,EAEGC,IAFH,CAESC,QAAD,IAAcH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CAFrC;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAGA;AAAtC;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAdM;;GAAMD,oB;;KAAAA,oB","sourcesContent":["import { createContext } from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { api } from \"../../services/api\";\n\nexport const TransactionsContext = createContext([]);\n\nexport const TransactionsProvider = () => {\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    api\n      .get(\"transactions\")\n      .then((response) => setTransactions(response.data.transactions));\n  }, []);\n\n  return (\n    <TransactionsContext.Provider value={ transactions }>\n      \n    </TransactionsContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}